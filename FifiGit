#!/usr/local/bin/python3
import requests
import sys
import os
import argparse
from string import Template

Token = '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' 
auth = {'Authorization':"token " + Token}

queryTemplate = Template(
"""{
  repository(name: $repo, owner: $user) {
    licenseInfo {
      key
      name
      url
      spdxId
    }
    isFork
    isPrivate
    forks {
      totalCount
    }
    stargazers {
      totalCount
    }
    watchers {
      totalCount
    }
    repositoryTopics(first: 100) {
      nodes {
        topic {
          name
        }
      }
    }
  }
}"""
)

queryTemplate2 = Template(
"""{
  user(login: $user) {
    name
    avatarUrl
    url
    email
    bio
    followers(first: 100) {
      nodes {
        login
      }
      totalCount
      edges {
        cursor
      }
    }
    following(first: 100) {
      nodes {
        login
      }
      totalCount
      edges {
        cursor
      }
    }
  }
}"""
)

queryTemplate3 = Template(
"""{
  user(login: $user) {
    followers(first: 100, after: $curso) {
      nodes {
        login
      }
      edges {
        cursor
      }
    }
  }
}"""
)

queryTemplate4 = Template(
"""{
  user(login: $user) {
    following(first: 100, after: $curso) {
      nodes {
        login
      }
      edges {
        cursor
      }
    }
  }
}"""
)

def screen_clear():
    if os.name == 'posix':
        _ = os.system('clear')
    else:
        _ = os.system('cls')

def run_query(query):
    request = requests.post('https://api.github.com/graphql', json={'query': query}, headers=auth)
    if request.status_code == 200:
        return request.json()
    else:
        raise Exception("Query failed to run by returning code of {}. {}".format(request.status_code, query))

def info2 (url):
    listData = []
    for pnum in range(1,600):
        urlN = url + f"&page={pnum}"
        point = requests.get(urlN, headers = auth).json()['items']
        if(point == []):
            break
        else:
            listData.append(point)
    return listData

def disp (url):
    listData = []
    point = requests.get(url, headers = auth).json()['items']
    listData.append(point)
    return listData

def invalid (ch):
    while (ch!= "y" and ch!= "Y" and ch!= "n" and ch!="N"):
        print(" Invalid")
        ch = input("\n Enter the choice again (y/n): ")
    return ch

def chckUser (user):
    url = f"https://api.github.com/users/{user}"
    response = requests.get(url, headers = auth)
    if response:
        pass
    else:
        sys.exit("\n User not found\n")


def uInfo(user, state):
    print ("\n =============================")
    print ("           USER INFO")
    print (" =============================\n")
    query = queryTemplate2.substitute(user = "\"{}\"".format(user))
    result = run_query(query)["data"]["user"]
    if (result == None):
        sys.exit("\n User not found\n")
    print (" Username: " + user)
    print (" Name : " + (result["name"] if result["name"] != None else "NULL"))
    print (" Avatar URL : " + result["avatarUrl"])
    print (" GitHub Hnadle : " + result["url"])
    print (" Email : " + (result["email"] if (result["email"] != "" and result["email"] != None) else "NULL"))
    print (" BioData : " + (result["bio"] if result["bio"] != None else "NULL"))

    if (state == 0):

        followers = result["followers"]["nodes"]
        tot = result["followers"]["totalCount"]
        print ("\n Followers : [" + str(tot) + "]")
        if (tot != 0):
            if (tot >= 25):
                ch = input(" Do u want the usernames? (y/n): ")
                ch = invalid(ch)
            else:
                ch = 'y'
            if (ch == 'y' or ch == 'Y'):
                iter = (int)(tot/100) + (1 if (tot%100 != 0) else 0)
                for j in range(iter):
                    if (j!=0):
                        curs = result["followers"]["edges"][99]["cursor"]
                        query = queryTemplate3.substitute(user = "\"{}\"".format(user), curso = "\"{}\"".format(curs))
                        followers = run_query(query)["data"]["user"]["followers"]["nodes"]
                    for i in range(len(followers)):
                        print(" * {}".format(followers[i]["login"]))

        following = result["following"]["nodes"]
        tot = result["following"]["totalCount"]
        print ("\n Following : [" + str(tot) + "]")
        if (tot != 0):
            if (tot >= 25):
                ch = input(" Do u want the usernames? (y/n): ")
                ch = invalid(ch)
            else:
                ch = 'y'
            if (ch == 'y' or ch == 'Y'):
                iter = (int)(tot/100) + (1 if (tot%100 != 0) else 0)
                for j in range(iter):
                    if (j!=0):
                        curs = result["following"]["edges"][99]["cursor"]
                        query = queryTemplate4.substitute(user = "\"{}\"".format(user), curso = "\"{}\"".format(curs))
                        following = run_query(query)["data"]["user"]["following"]["nodes"]
                    for i in range(len(following)):
                        print(" * {}".format(following[i]["login"]))

def rInfo(user, name, state):
    chckUser(user)
    response2 = requests.get(f"https://api.github.com/search/repositories?q=user:{user}&per_page=1", headers = auth).json()
    print ("\n =============================")
    print ("           REPO INFO")
    print ("       unforked only  :)")
    print (" =============================\n")
    print (" Total count : [" + str(response2['total_count']) + "]")
    if(state == 0):
        resp = 'y'
        if (response2['total_count'] > 1000):
            print(" Warning: API limits search to first 1000 results only ({} Repos will be missed)".format(response2['total_count'] - 1000))
            resp = input("\n Proceed, dispite the Warning? (y/n): ")
            resp = invalid(resp)
        if (resp == 'y' or resp == 'Y'):
            query = queryTemplate.substitute(user = "\"{}\"".format(user), repo = "\"{}\"".format(name))
            result = run_query(query) 
            if(result["data"]["repository"] != None and result["data"]["repository"]["isFork"]!=True):
                print ("\n Name : {}/{}".format(user, name))
                print (" Private : " + ("True" if result["data"]["repository"]["isPrivate"] else "False"))
                print (" Fork Count : " + str(result["data"]["repository"]["forks"]["totalCount"]))
                print (" Stargazers Count : " + str(result["data"]["repository"]["stargazers"]["totalCount"]))
                print (" Watchers Count : " + str(result["data"]["repository"]["watchers"]["totalCount"]))

                topic = result["data"]["repository"]["repositoryTopics"]["nodes"]
                if (len(topic) == 0):
                    print (" Topics : NULL")
                else:
                    print (" Topics : " + str(len(topic)))
                    for i in range(len(topic)):
                        print (" * {}".format(topic[i]["topic"]["name"]))

                if (result["data"]["repository"]["licenseInfo"] == None):
                    print (" License : NULL")
                else:
                    print (" License : " + result["data"]["repository"]["licenseInfo"]["name"])
                    print (" * Key : " + result["data"]["repository"]["licenseInfo"]["key"])                                      
                    print (" * spdx_id : " + result["data"]["repository"]["licenseInfo"]["spdxId"])
                    print (" * url : " + result["data"]["repository"]["licenseInfo"]["url"])

            else:
                print ("\n Repo not found\n Hint: you must own the repo (not forked)")
                if (response2['total_count'] > 1000):
                    print(" Hint: the repos exceeded API limit, so it must've missed there")

    elif(state == 1):
        if (response2['total_count'] == 0):
            print(" NULL")
        else:
            resp = 'y'
            i = 1
            if (response2['total_count'] > 1000):
                print(" Warning: API limits search to first 1000 results (100 pages, {} Repos will be missed)".format(response2['total_count'] - 1000))
                tot = 100
            else:
                tot = (int)(response2['total_count']/10) + (1 if (response2['total_count']%10 != 0) else 0)
            while (resp == 'y' or resp == 'Y'):
                print ("\n Page: {} of {}".format(i, tot))
                repos = disp(f"https://api.github.com/search/repositories?q=user:{user}&per_page=10&page={i}")
                for page in repos:
                    for cont in page:
                        print (" * " + cont['full_name'].split("/")[1])
                if (i < tot):
                    resp = input("\n Next Page? (y/n/goto(g)): ")
                    if (resp == 'g' or resp == 'G'):
                        page = input(" Enter the page no.: ")
                        while (page.isnumeric() == False or (int(page)<1 or int(page)>tot)):
                            print(" Invalid Input")
                            page = input("\n Enter the page no.: ")
                        i = int(page)
                        resp = 'y'
                    else:
                        resp = invalid(resp)
                        i+=1
                elif (i == tot and tot!=1):
                    resp = input("\n Goto a Page? (y/n): ")
                    resp = invalid(resp)
                    if (resp == 'y' or resp == 'Y'):
                        page = input(" Enter the page no.: ")
                        while (page.isnumeric() == False or (int(page)<1 or int(page)>tot)):
                            print(" Invalid Input")
                            page = input("\n Enter the page no.: ")
                        i = int(page)
                    else:
                        break
                else:
                    break
    
    elif (state == 2):
        if (response2['total_count'] == 0):
            print(" NULL")
        else:
            tot = 0
            i = 1
            resp = 'y'
            if (response2['total_count'] > 1000):
                print(" Warning: API limits search to first 1000 results only ({} Repos will be missed)".format(response2['total_count'] - 1000))
                print(" Warning: Sorting and Displaying will take a LOT of time")
                resp = input("\n Proceed, dispite the Warning? (y/n): ")
                resp = invalid(resp)
                tot = 100
            elif (response2['total_count'] > 100):
                print(" Warning: Sorting and Displaying will take a *LOT* of time")
                resp = input("\n Proceed, dispite the Warning? (y/n): ")
                resp = invalid(resp)
            if (tot == 0):
                tot = (int)(response2['total_count']/10) + (1 if (response2['total_count']%10 != 0) else 0)
            if (resp == 'y' or resp == 'Y'):
                repo2 = info2(f"https://api.github.com/search/repositories?q=user:{user}&per_page=100")
                repo_names=[]
                for page in repo2:
                    for repo in page:
                        try:
                            repo_names.append(repo['full_name'].split("/")[1])
                        except:
                            pass
                repo_names.sort(key=str.lower)
                while (resp == 'y' or resp == 'Y'):
                    print ("\n Page: {} of {}".format(i, tot))
                    for j in range(10*(i-1), (10*i if (i!=tot) else response2['total_count'])):
                        print (" * " + repo_names[j])
                    if (i < tot):
                        resp = input("\n Next Page? (y/n/goto(g)): ")
                        if (resp == 'g' or resp == 'G'):
                            page = input(" Enter the page no.: ")
                            while (page.isnumeric() == False or (int(page)<1 or int(page)>tot)):
                                print(" Invalid Input")
                                page = input("\n Enter the page no.: ")
                            i = int(page)
                            resp = 'y'
                        else:
                            resp = invalid(resp)
                            i+=1
                    elif (i == tot and tot!=1):
                        resp = input("\n Goto a Page? (y/n): ")
                        resp = invalid(resp)
                        if (resp == 'y' or resp == 'Y'):
                            page = input(" Enter the page no.: ")
                            while (page.isnumeric() == False or (int(page)<1 or int(page)>tot)):
                                print(" Invalid Input")
                                page = input("\n Enter the page no.: ")
                            i = int(page)
                        else:
                            break
                    else:
                        break

def main():
    parser = argparse.ArgumentParser(description = "GitHub API interface",
                                     epilog = "Enjoy the program! :)")
    group = parser.add_mutually_exclusive_group()
    parser.add_argument("name", help="Initiates the program for the given user")
    group.add_argument("-u", "--uinfo", action="store_true", help="Display the User Info")
    group.add_argument("-ub", "--uinfo_basic", action="store_true", help="Display the basic User Info only")
    group.add_argument("-r", "--repo", help="Displays the Repo Info")
    group.add_argument("-l","--list", action="store_true", help="Display all the Repo Names")
    group.add_argument("-ls","--sort_list", action="store_true", help="Display all the Repo Names sorted in Alpha")
    args = parser.parse_args()

    if (args.repo != None):
        rInfo(args.name, args.repo, 0)
        print("\n")
    elif (args.uinfo):
        uInfo(args.name, 0)
        print("\n")
    elif (args.list):
        rInfo(args.name, args.repo, 1)
        print("\n")
    elif (args.sort_list):
        rInfo(args.name, args.repo, 2)
        print("\n")
    elif (args.uinfo_basic):
        uInfo(args.name, 1)
        print("\n")
    else:
        print ("err st\n")
        sys.exit()
    
if __name__ == "__main__":
    main()

# test = info2(f"https://api.github.com/search/repositories?q=user:{user}")
# print (len(test))

# all_repo_names=[]
# for page in test:
#     for repo in page:
#         try:
#             all_repo_names.append(repo['full_name'].split("/")[1])
#         except:
#             pass
    
# print (all_repo_names)

# test = requests.get("https://api.github.com/search/repositories?q=user:Aeroscythe", headers=auth)
# print (test.json()['items'])