#!/usr/local/bin/python3

import requests
import sys
import argparse
from string import Template

Token = 'TOKEN_GOES_HERE' 
auth = {'Authorization':"token " + Token}

#--repo
queryTemplate = Template(
"""{
  user(login: $user) {
    repositories(ownerAffiliations: OWNER) {
      totalCount
    }
  }
  repository(name: $repo, owner: $user) {
    licenseInfo {
      key
      name
      url
      spdxId
    }
    isFork
    isPrivate
    forks {
      totalCount
    }
    stargazers {
      totalCount
    }
    watchers {
      totalCount
    }
    repositoryTopics(first: 100) {
      nodes {
        topic {
          name
        }
      }
    }
  }
}"""
)

#--uinfo_basic (--uinfo (init))
queryTemplate2 = Template(
"""{
  user(login: $user) {
    name
    avatarUrl
    url
    email
    bio
    followers(first: 100) {
      nodes {
        login
      }
      totalCount
      edges {
        cursor
      }
    }
    following(first: 100) {
      nodes {
        login
      }
      totalCount
      edges {
        cursor
      }
    }
  }
}"""
)

#--uinfo (followers)
queryTemplate3 = Template(
"""{
  user(login: $user) {
    followers(first: 100, after: $curso) {
      nodes {
        login
      }
      edges {
        cursor
      }
    }
  }
}"""
)

#--uinfo (following)
queryTemplate4 = Template(
"""{
  user(login: $user) {
    following(first: 100, after: $curso) {
      nodes {
        login
      }
      edges {
        cursor
      }
    }
  }
}"""
)

#--list (init)
queryTemplate5 = Template(
"""{
  user(login: $user) {
    repositories(first: 10, ownerAffiliations: OWNER, orderBy: {field: $str, direction: $str2}) {
      totalCount
      nodes {
        name
        isFork
      }
      edges {
        cursor
      }
    }
  }
}"""
)

#--list (after)
queryTemplate6 = Template(
"""{
  user(login: $user) {
    repositories(first: 10, ownerAffiliations: OWNER, orderBy: {field: $str, direction: $str2}, after: $curso) {
      nodes {
        name
        isFork
      }
      edges {
        cursor
      }
    }
  }
}"""
)

def run_query(query):
    request = requests.post('https://api.github.com/graphql', json={'query': query}, headers=auth)
    if request.status_code == 200:
        return request.json()
    else:
        raise Exception("Query failed to run by returning code of {}. {}".format(request.status_code, query))

def invalid (ch):
    while (ch!= "y" and ch!= "Y" and ch!= "n" and ch!="N"):
        print(" Invalid")
        ch = input("\n Enter the choice again (y/n): ")
    return ch

def uInfo(user, state):
    print ("\n =============================")
    print ("           USER INFO")
    print (" =============================\n")
    query = queryTemplate2.substitute(user = "\"{}\"".format(user))
    result = run_query(query)["data"]["user"]
    if (result == None):
        sys.exit("\n User not found\n")
    print (" Username: " + user)
    print (" Name : " + (result["name"] if result["name"] != None else "NULL"))
    print (" Avatar URL : " + result["avatarUrl"])
    print (" GitHub Hnadle : " + result["url"])
    print (" Email : " + (result["email"] if (result["email"] != "" and result["email"] != None) else "NULL"))
    print (" BioData : " + (result["bio"] if result["bio"] != None else "NULL"))

    if (state == 0):

        followers = result["followers"]["nodes"]
        tot = result["followers"]["totalCount"]
        print ("\n Followers : [" + str(tot) + "]")
        if (tot != 0):
            ch = input(" Do u want the usernames? (y/n): ")
            ch = invalid(ch)
            if (ch == 'y' or ch == 'Y'):
                iter = (int)(tot/100) + (1 if (tot%100 != 0) else 0)
                for j in range(iter):
                    if (j!=0):
                        curs = result["followers"]["edges"][99]["cursor"]
                        query = queryTemplate3.substitute(user = "\"{}\"".format(user), curso = "\"{}\"".format(curs))
                        result = run_query(query)["data"]["user"]
                        followers = result["followers"]["nodes"]
                    for i in range(len(followers)):
                        print(" * {}".format(followers[i]["login"]))

        following = result["following"]["nodes"]
        tot = result["following"]["totalCount"]
        print ("\n Following : [" + str(tot) + "]")
        if (tot != 0):
            ch = input(" Do u want the usernames? (y/n): ")
            ch = invalid(ch)
            if (ch == 'y' or ch == 'Y'):
                iter = (int)(tot/100) + (1 if (tot%100 != 0) else 0)
                for j in range(iter):
                    if (j!=0):
                        curs = result["following"]["edges"][99]["cursor"]
                        query = queryTemplate4.substitute(user = "\"{}\"".format(user), curso = "\"{}\"".format(curs))
                        result = run_query(query)["data"]["user"]
                        following = result["following"]["nodes"]
                    for i in range(len(following)):
                        print(" * {}".format(following[i]["login"]))

def rInfo(user, name, state, orBy = None, sorBy = None):
    rtot = 0
    print ("\n =============================")
    print ("           REPO INFO")
    print (" =============================\n")
    if(state == 0):
        query = queryTemplate.substitute(user = "\"{}\"".format(user), repo = "\"{}\"".format(name))
        result = run_query(query)
        if (result["data"]["user"] == None):
            sys.exit("\n User not found\n")
        rtot = result["data"]["user"]["repositories"]["totalCount"]
        print (" Total count : [" + str(rtot) + "]") 
        if(result["data"]["repository"] != None):
            print ("\n Name : {}/{}".format(user, name) + (" (f)" if result["data"]["repository"]["isFork"] else ""))
            print (" Private : " + ("True" if result["data"]["repository"]["isPrivate"] else "False"))
            print (" Fork Count : " + str(result["data"]["repository"]["forks"]["totalCount"]))
            print (" Stargazers Count : " + str(result["data"]["repository"]["stargazers"]["totalCount"]))
            print (" Watchers Count : " + str(result["data"]["repository"]["watchers"]["totalCount"]))

            topic = result["data"]["repository"]["repositoryTopics"]["nodes"]
            if (len(topic) == 0):
                print (" Topics : NULL")
            else:
                print (" Topics : " + str(len(topic)))
                for i in range(len(topic)):
                    print (" * {}".format(topic[i]["topic"]["name"]))

            if (result["data"]["repository"]["licenseInfo"] == None):
                print (" License : NULL")
            else:
                print (" License : " + result["data"]["repository"]["licenseInfo"]["name"])
                print (" * Key : " + result["data"]["repository"]["licenseInfo"]["key"])                                      
                print (" * spdx_id : " + result["data"]["repository"]["licenseInfo"]["spdxId"])
                print (" * url : " + result["data"]["repository"]["licenseInfo"]["url"])

        else:
            print ("\n Repo not found\n Hint: you must have the OAuth token to access private Repos")

    elif(state == 1):
        query = queryTemplate5.substitute(user = "\"{}\"".format(user), str = orBy, str2 = sorBy)
        result = run_query(query)
        if (result["data"]["user"] == None):
            sys.exit("\n User not found\n")
        rtot = result["data"]["user"]["repositories"]["totalCount"]
        print (" Total count : [" + str(rtot) + "]")
        if (rtot == 0):
            print(" NULL")
        else:
            curs = []
            if(rtot > 10):
                curs.append(result["data"]["user"]["repositories"]["edges"][9]["cursor"])
            i = 1
            if (rtot > 1000):
                print(" Warning: API limits search to first 1000 results (100 pages, {} Repos will be missed)".format(rtot - 1000))
            tot = (int)(rtot/10) + (1 if (rtot%10 != 0) else 0)
            repos = result["data"]["user"]["repositories"]["nodes"]
            flag = 1
            while (flag == 1):
                flag = 0
                print ("\n Page: {} of {}".format(i, tot))
                for j in range(len(repos)):
                    print (" * " + repos[j]["name"] + (" (f)" if repos[j]["isFork"] else ""))
                if (tot == 1):
                    break
                if (i == 1):
                    resp = input("\n Navigation (next (n)/ exit(e)): ")
                    while (resp!= "n" and resp!= "N" and resp!= "e" and resp!="E"):
                        print(" Invalid")
                        resp = input("\n Navigation (next (n)/ exit(e)): ")
                    if (resp != 'e' and resp!= 'E'):
                        flag = 1
                        query = queryTemplate6.substitute(user = "\"{}\"".format(user), str = orBy, str2 = sorBy, curso = "\"{}\"".format(curs[0]))
                        result = run_query(query)
                        if (len(curs) == 1 and i!= tot-1):
                            curs.append(result["data"]["user"]["repositories"]["edges"][9]["cursor"])
                        repos = result["data"]["user"]["repositories"]["nodes"]
                        i += 1
                elif (i < tot):
                    resp = input("\n Navigation (next (n)/ previous (p)/ exit (e)): ")
                    while (resp!= "n" and resp!= "N" and resp!= "p" and resp!= "P" and resp!= "e" and resp!="E"):
                        print(" Invalid")
                        resp = input("\n Navigation (next (n)/ previous (p)/ exit (e)): ")
                    if (resp != 'e' and resp!= 'E'):
                        if (resp == 'n' or resp == 'N'):
                            flag = 1
                            query = queryTemplate6.substitute(user = "\"{}\"".format(user), str = orBy, str2 = sorBy, curso = "\"{}\"".format(curs[i-1]))
                            result = run_query(query)
                            if (i == len(curs) and i!= tot-1):
                                curs.append(result["data"]["user"]["repositories"]["edges"][9]["cursor"])
                            repos = result["data"]["user"]["repositories"]["nodes"]
                            i += 1
                        else:
                            flag = 1
                            if (i == 2):
                                query = queryTemplate5.substitute(user = "\"{}\"".format(user), str = orBy, str2 = sorBy)
                            else:
                                query = queryTemplate6.substitute(user = "\"{}\"".format(user), str = orBy, str2 = sorBy, curso = "\"{}\"".format(curs[i-3]))
                            result = run_query(query)
                            repos = result["data"]["user"]["repositories"]["nodes"]
                            i -= 1
                else:
                    resp = input("\n Navigation (previous (p)/ exit(e)): ")
                    while (resp!= "p" and resp!= "P" and resp!= "e" and resp!="E"):
                        print(" Invalid")
                        resp = input("\n Navigation (previous (p)/ exit(e)): ")
                    if (resp != 'e' and resp!= 'E'):
                        flag = 1
                        if (i == 2):
                            query = queryTemplate5.substitute(user = "\"{}\"".format(user), str = orBy, str2 = sorBy)
                        else:
                            query = queryTemplate6.substitute(user = "\"{}\"".format(user), str = orBy, str2 = sorBy, curso = "\"{}\"".format(curs[i-3]))
                        result = run_query(query)
                        repos = result["data"]["user"]["repositories"]["nodes"]
                        i -= 1

def main():
    parser = argparse.ArgumentParser(description = "GitHub API interface",
                                     epilog = "Enjoy the program! :)")
    group = parser.add_mutually_exclusive_group()
    parser.add_argument("name", help="Initiates the program for the given user")
    group.add_argument("-u", "--uinfo", action="store_true", help="Display the User Info")
    group.add_argument("-ub", "--uinfo_basic", action="store_true", help="Display the basic User Info only")
    group.add_argument("-r", "--repo", help="Displays the Repo Info")
    group.add_argument("-la","--alpha_list", action='store', choices=["DESC", "ASC"], help="lists all the Repos in Alpha order.")
    group.add_argument("-ls","--star_list", action='store', choices=["DESC", "ASC"], help="lists all the Repos in Stargazers order.")
    group.add_argument("-lc","--created_list", action='store', choices=["DESC", "ASC"], help="lists all the Repos in DOC order.")
    group.add_argument("-lu","--updated_list", action='store', choices=["DESC", "ASC"], help="lists all the Repos in DOU order.")
    group.add_argument("-lp","--pushed_list", action='store', choices=["DESC", "ASC"], help="lists all the Repos in DOP order.")
    args = parser.parse_args()

    if (args.repo != None):
        rInfo(args.name, args.repo, 0)
        print("\n")
    elif (args.uinfo):
        uInfo(args.name, 0)
        print("\n")
    elif (args.alpha_list != None):
        rInfo(args.name, args.repo, 1, "NAME", args.alpha_list)
        print("\n")
    elif (args.star_list != None):
        rInfo(args.name, args.repo, 1, "STARGAZERS", args.star_list)
        print("\n")
    elif (args.created_list != None):
        rInfo(args.name, args.repo, 1, "CREATED_AT", args.created_list)
        print("\n")
    elif (args.updated_list != None):
        rInfo(args.name, args.repo, 1, "UPDATED_AT", args.updated_list)
        print("\n")
    elif (args.pushed_list != None):
        rInfo(args.name, args.repo, 1, "PUSHED_AT", args.pushed_list)
        print("\n")
    elif (args.uinfo_basic):
        uInfo(args.name, 1)
        print("\n")
    else:
        print ("err st\n")
        sys.exit()
    
if __name__ == "__main__":
    main()