#!/usr/local/bin/python3
import requests
import sys
import os
import argparse

Token = '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' 
auth = {'Authorization':"token " + Token}

def screen_clear():
    if os.name == 'posix':
        _ = os.system('clear')
    else:
        _ = os.system('cls')

def info (url):
    listData = []
    for pnum in range(1,600):
        urlN = url + f"?page={pnum}"
        point = requests.get(urlN, headers = auth).json()
        if(point == []):
            # repos.append(None)
            break
        else:
            listData.append(point)
    return listData

def info2 (url):
    listData = []
    for pnum in range(1,600):
        urlN = url + f"&page={pnum}"
        point = requests.get(urlN, headers = auth).json()['items']
        if(point == []):
            # repos.append(None)
            break
        else:
            listData.append(point)
    return listData

def invalid (ch):
    while (ch!= "y" and ch!= "Y" and ch!= "n" and ch!="N"):
        print(" Invalid")
        ch = input("\n Enter the choice again (y/n): ")
    return ch

def chckUser (user):
    url = f"https://api.github.com/users/{user}"
    response = requests.get(url, headers = auth)
    if response:
        data = response.json()
        return data
    else:
        sys.exit(" User not found")


def uInfo(user):
    data = chckUser(user)
    print ("\n =============================")
    print ("           USER INFO")
    print (" =============================\n")
    print (" Username: " + user)
    print (" Name : " + (data['name'] if data['name'] != None else "NULL"))
    print (" Avatar URL : " + data['avatar_url'])
    print (" GitHub Hnadle : " + data['url'])
    print (" Email : " + (data['email'] if data['email'] != None else "NULL"))
    print (" BioData : " + (data['bio'] if data['bio'] != None else "NULL"))

    print ("\n Followers : [" + str(data['followers']) + "]")
    if (data['followers'] != 0):
        if (data['followers'] >= 25):
            ch = input(" Do u want the usernames? (y/n): ")
            ch = invalid(ch)
        else:
            ch = 'y'
        if (ch == 'y' or ch == 'Y'):
            followers = info (f"https://api.github.com/users/{user}/followers")
            for page in followers:
                for cont in page:
                    try:
                        print (" * " + cont['login'])
                    except:
                        pass

    print ("\n Following : [" + str(data['following']) + "]")
    if (data['following'] != 0):
        if (data['following'] >= 25):
            ch = input(" Do u want the usernames? (y/n): ")
            ch = invalid(ch)
        else:
            ch = 'y'
        if (ch == 'y' or ch == 'Y'):
            following = info (f"https://api.github.com/users/{user}/following")
            for page in following:
                for cont in page:
                    try:
                        print (" * " + cont['login'])
                    except:
                        pass

def rInfo(user):
    chckUser(user)
    print ("\n =============================")
    print ("           REPO INFO")
    print (" =============================\n")
    response2 = requests.get(f"https://api.github.com/search/repositories?q=user:{user}&per_page=1", headers = auth).json()
    print (" Total No. of Repos (not forked): " + str(response2['total_count']))
    if (response2['total_count'] > 50):
        print ("\n Warning: There are a lot of repos, the system may take a log time to respond.")
    resp = input("\n Enquire about Repos? (y/n): ")
    resp = invalid(resp)
    if (resp == 'y' or resp == 'Y'):
        repos = info2 (f"https://api.github.com/search/repositories?q=user:{user}&per_page=100")
    while (resp!='n' and resp!='N'):
        flag = 0
        name = input (" Enter the repo name : ")
        for page in repos:
            for cont in page:
                if(cont['full_name'].split("/")[1] == name):
                    print (" Private : " + ("True" if cont['private'] else "False"))
                    print (" Fork Count : " + str(cont['forks_count']))
                    print (" Stargazers Count : " + str(cont['stargazers_count']))
                    print (" Watchers Count : " + str(cont['watchers_count']))
                    if (cont['license'] == None):
                        print (" License : NULL")
                    else:
                        print (" License : " + cont['license']['name'])
                        print (" * Key : " + cont['license']['key'])                    
                        print (" * spdx_id : " + cont['license']['spdx_id'])
                        print (" * url : " + cont['license']['url'])
                        print (" * node_id : " + cont['license']['node_id'])
                    flag = 1
                else:
                    pass
        if (flag == 0):
            print (" Repo not found")
        resp = input("\n Continue? (y/n): ")
        resp = invalid(resp)

def main():
    fl = 0
    parser = argparse.ArgumentParser()
    parser.add_argument("name", help="initiates the program for GitHub user")
    parser.add_argument("-u", "--uinfo", action="store_true", help="Display only User Info")
    parser.add_argument("-r", "--rinfo", action="store_true", help="Diplay only Repo Info")
    args = parser.parse_args()
    user = args.name
    if (args.rinfo):
        fl = 1
        rInfo(user)
    if (args.uinfo):
        fl = 1
        uInfo(user)
    elif (fl == 0):
        uInfo(user)
        rInfo(user)
    
    # idek why i wrote these 2 lines
    print("\n Wrapping up everything...")
    print(" Successfully Terminated...\n")
    
if __name__ == "__main__":
    main()

# test = info2(f"https://api.github.com/search/repositories?q=user:{user}")
# print (len(test))

# all_repo_names=[]
# for page in test:
#     for repo in page:
#         try:
#             all_repo_names.append(repo['full_name'].split("/")[1])
#         except:
#             pass
    
# print (all_repo_names)

# test = requests.get("https://api.github.com/search/repositories?q=user:Aeroscythe", headers=auth)
# print (test.json()['items'])

